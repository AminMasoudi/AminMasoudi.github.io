{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my website","text":"<p>Hi, I'm Amin, a backend developer and student of computer science with a passion for developing and solving problems. When I'm not  working, you can find me climbing.</p>"},{"location":"#resume","title":"Resume","text":"<p>you can find my resume in here or just download it from here.</p>"},{"location":"#get-in-touch","title":"Get in touch","text":"<p>If you want to say hello, share feedback, or collaborate on a project, please feel free to reach out:</p> <ul> <li>Email: aminmasoudi2003@gmail.com</li> <li>Telegram: @amin_masoudi_123</li> <li>LinkedIn: amin-masoudi</li> <li>Github: aminmasoudi</li> </ul> <p>Thank you for visiting my site! I hope you enjoy your time here.</p> <p>Best, Amin masoudi</p>"},{"location":"Projects/Api-GW/","title":"API Gateway","text":""},{"location":"Projects/Api-GW/#overview","title":"Overview","text":"<p>This project is an API Gateway built using Starlette and HTTPX. It is currently in the MVP stage, focusing on basic routing functionalities.</p>"},{"location":"Projects/Api-GW/#about-api-gateway","title":"About API gateway","text":"<p>check out RedHat docs to understand the usage.</p> <p></p>"},{"location":"Projects/Api-GW/#features","title":"Features","text":"<ul> <li>Routing: Directs incoming requests to the appropriate backend services.</li> </ul>"},{"location":"Projects/Api-GW/#planned-features","title":"Planned Features","text":"<ul> <li>CI/CD: Test and build image on push or merge with main.  </li> <li>Dynamic Middleware: Allows for dynamic addition and removal of middleware.</li> <li>Firewall: Basic firewall functionalities to secure the gateway.</li> <li>Database Configuration: Configures and manages database connections.</li> <li>Observations: Tracks and logs requests for monitoring and debugging.</li> <li>Authentication and Authorization: Implement security measures to control access to services.</li> <li>Rate Limiting: Add functionality to limit the number of requests a client can make.</li> <li>Load Balancing: Distribute incoming requests across multiple instances of a service.</li> <li>Caching: Store responses to reduce load on backend services.</li> </ul>"},{"location":"Projects/Api-GW/#technologies-used","title":"Technologies Used","text":"<p>Starlette: A lightweight ASGI framework/toolkit. HTTPX: An HTTP client for Python.</p>"},{"location":"Projects/Api-GW/#getting-started","title":"Getting Started","text":""},{"location":"Projects/Api-GW/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> </ul>"},{"location":"Projects/Api-GW/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:     <pre><code>git clone https://github.com/aminmasoudi/api-gateway.git\ncd api-gateway\n</code></pre></p> </li> <li> <p>Create a settings file:     Create a file named <code>prod.py</code> in the settings directory with the necessary configuration settings.</p> </li> <li>Run with Docker:     <pre><code>docker run -v $(pwd)/prod.py:/app/prod.py -p 8000:8000 aminmasoudii/api-gateway\n</code></pre></li> </ol>"},{"location":"Projects/Api-GW/#usage","title":"Usage","text":"<p>Once the application is running, you can access the API Gateway at http://localhost:8000.</p>"},{"location":"Projects/Api-GW/#configuration","title":"Configuration","text":"<ul> <li>prod.py: This file should contain all the necessary configuration settings for the application.</li> </ul>"},{"location":"Projects/Api-GW/#contributing","title":"Contributing","text":"<p>We welcome contributions! Please follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch (git checkout -b feature-branch).</li> <li>Make your changes.</li> <li>Commit your changes (git commit -m 'Add new feature').</li> <li>Push to the branch (git push origin feature-branch).</li> <li>Open a pull request.</li> </ol>"},{"location":"Projects/Api-GW/#areas-for-contribution","title":"Areas for Contribution","text":"<ul> <li>Fixing Cookies and CSRF Tokens: Secure handling of cookies and CSRF tokens.</li> <li>Implementing Planned Features: Work on any of the planned features listed above.</li> <li>Reporting any Issue: Submit any issue you see.</li> </ul>"},{"location":"Projects/Api-GW/#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"Projects/Api-GW/#contact","title":"Contact","text":"<p>For any questions or support, please contact the maintainer at aminmasoudi2003@gmail.com.</p>"},{"location":"Projects/micro-service/","title":"mp4 to mp3 Converter - A Micro-Services Example","text":"<p>github: micro-serv-des</p> <p>Welcome to the mp4 to mp3 converter, an example project showcasing micro-service system design concepts.</p>"},{"location":"Projects/micro-service/#what-is-micro-service-design","title":"What is Micro-Service Design?","text":"<p>Micro-service design is an architectural style that structures an application as a collection of small, independent services. Each service runs in its own process and communicates with lightweight protocols typically over HTTP.</p> <p></p> <p>In a micro-service architecture, each service is designed to be:</p> <ul> <li>Independent: Each service can be developed, tested, and deployed independently of other services.</li> <li>Decentralized: Services are not tightly coupled, allowing for greater flexibility and scalability.</li> <li>Resilient: If one service fails or becomes unavailable, others can continue to function normally.</li> </ul>"},{"location":"Projects/micro-service/#overview","title":"Overview","text":"<p>This project demonstrates how to design and implement a scalable, distributed system using multiple micro-services. The app converts MP4 files to MP3 audio files, utilizing various technologies such as Docker, Kubernetes, MySQL, MongoDB, RabbitMQ, and Flask.</p>"},{"location":"Projects/micro-service/#features","title":"Features","text":"<ul> <li>Convert MP4 videos to MP3 audio files</li> <li>Authenticates users with JWT tokens</li> <li>Saves video metadata in a MongoDB database</li> <li>Sends email notifications upon conversion completion</li> <li>Utilizes RabbitMQ as the message broker</li> </ul>"},{"location":"Projects/micro-service/#architecture","title":"Architecture","text":"<p>The app consists of 6 micro-services:</p> <ol> <li>Gateway: The main entry point, responsible for routing requests to the respective services.</li> <li>Auth: Handles authentication and token validation using JWT.</li> <li>Converter: Transforms MP4 videos into MP3 audio files.</li> <li>Notify: Sends email notifications upon conversion completion.</li> <li>Video Upload : Handles video uploads and validates tokens.</li> </ol>"},{"location":"Projects/micro-service/#technologies","title":"Technologies","text":"<ul> <li>Docker</li> <li>Kubernetes</li> <li>MySQL</li> <li>MongoDB</li> <li>RabbitMQ</li> <li>Flask</li> </ul> <p>TODO</p> <ul> <li>[ ] Add Tests</li> <li>[ ] Implement the registration feature (planned for v0.2)</li> <li>[ ] Migrate the Gateway service to Django (planned for v0.3)</li> </ul>"}]}
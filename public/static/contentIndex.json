{"Projects/Api-Gateway":{"title":"Api Gateway","links":[],"tags":[],"content":"Overview\nThis project is an API Gateway built using Starlette and HTTPX. It is currently in the MVP stage, focusing on basic routing functionalities.\nAbout API gateway\ncheck out RedHat docs to understand the usage.\n\nFeatures\n\nRouting: Directs incoming requests to the appropriate backend services.\n\nPlanned Features\n\nCI/CD: Test and build image on push or merge with main.\nDynamic Middleware: Allows for dynamic addition and removal of middleware.\nFirewall: Basic firewall functionalities to secure the gateway.\nDatabase Configuration: Configures and manages database connections.\nObservations: Tracks and logs requests for monitoring and debugging.\nAuthentication and Authorization: Implement security measures to control access to services.\nRate Limiting: Add functionality to limit the number of requests a client can make.\nLoad Balancing: Distribute incoming requests across multiple instances of a service.\nCaching: Store responses to reduce load on backend services.\n\nTechnologies Used\nStarlette: A lightweight ASGI framework/toolkit.\nHTTPX: An HTTP client for Python.\nGetting Started\nPrerequisites\n\nDocker\n\nInstallation\n\n\nClone the repository:\ngit clone github.com/aminmasoudi/api-gateway.git\ncd api-gateway\n\n\nCreate a settings file:\nCreate a file named prod.py in the settings directory with the necessary configuration settings.\n\n\nRun with Docker:\ndocker run -v $(pwd)/prod.py:/app/prod.py -p 8000:8000 aminmasoudii/api-gateway\n\n\nUsage\nOnce the application is running, you can access the API Gateway at http://localhost:8000.\nConfiguration\n\nprod.py: This file should contain all the necessary configuration settings for the application.\n\nContributing\nWe welcome contributions! Please follow these steps:\n\nFork the repository.\nCreate a new branch (git checkout -b feature-branch).\nMake your changes.\nCommit your changes (git commit -m ‘Add new feature’).\nPush to the branch (git push origin feature-branch).\nOpen a pull request.\n\nAreas for Contribution\n\nFixing Cookies and CSRF Tokens: Secure handling of cookies and CSRF tokens.\nImplementing Planned Features: Work on any of the planned features listed above.\nReporting any Issue: Submit any issue you see.\n\nLicense\nThis project is licensed under the MIT License. See the LICENSE file for details.\nContact\nFor any questions or support, please contact the maintainer at aminmasoudi2003@gmail.com."},"Projects/msd":{"title":"mp4 to mp3 Converter - A Micro-Services Example","links":[],"tags":[],"content":"github: micro-serv-des\nWelcome to the mp4 to mp3 converter, an example project showcasing micro-service system design concepts.\nWhat is Micro-Service Design?\nMicro-service design is an architectural style that structures an application as a collection of small, independent services. Each service runs in its own process and communicates with lightweight protocols typically over HTTP.\n\nIn a micro-service architecture, each service is designed to be:\n\nIndependent: Each service can be developed, tested, and deployed independently of other services.\nDecentralized: Services are not tightly coupled, allowing for greater flexibility and scalability.\nResilient: If one service fails or becomes unavailable, others can continue to function normally.\n\nOverview\nThis project demonstrates how to design and implement a scalable, distributed system using multiple micro-services. The app converts MP4 files to MP3 audio files, utilizing various technologies such as Docker, Kubernetes, MySQL, MongoDB, RabbitMQ, and Flask.\nFeatures\n\nConvert MP4 videos to MP3 audio files\nAuthenticates users with JWT tokens\nSaves video metadata in a MongoDB database\nSends email notifications upon conversion completion\nUtilizes RabbitMQ as the message broker\n\nArchitecture\nThe app consists of 6 micro-services:\n\nGateway: The main entry point, responsible for routing requests to the respective services.\nAuth: Handles authentication and token validation using JWT.\nConverter: Transforms MP4 videos into MP3 audio files.\nNotify: Sends email notifications upon conversion completion.\nrabbitmq: Handles queue for converter and notify service.\n\nTechnologies\n\nDocker\nKubernetes\nMySQL\nMongoDB\nRabbitMQ\nFlask\n\nTODO\n\n Add Tests\n Implement the registration feature (planned for v0.2)\n Migrate the Gateway service to Django (planned for v0.3)\n"},"index":{"title":"Welcome to my site","links":["cv_embeded","cv.pdf","Projects/Api-Gateway","Projects/msd"],"tags":[],"content":"Hi, I’m Amin, a backend developer and student of computer science with a passion for developing and solving problems. When I’m not\nworking, you can find me climbing.\nResume\nyou can find my resume in here or just download it from here.\nProjects\n\n\nApi Gateway\nan API Gateway built using Starlette and HTTPX.\n\n\nmp4 to mp3 Converter - A Micro-Services Example\nan example project showcasing micro-service system design concepts.\n\n\nGet in touch\nIf you want to say hello, share feedback, or collaborate on a project, please feel free to reach out:\n\nEmail: aminmasoudi2003@gmail.com\nTelegram: @amin_masoudi_123\nLinkedIn: amin-masoudi\nGithub: aminmasoudi\n\nThank you for visiting my site! I hope you enjoy your time here.\nBest,\nAmin masoudi"}}